Jan Potma   - s4476360
Randy Wanga - s4462939

We've built this DNS resolver with Python 2.7 using a provided framework. 

Our DNS resolver creates a query message that'll be sent to various servers. Initially this list of servers
consists of the 13 DNS root servers, a through k. The message sent has the ANY type to ensure that we receive
all the relevant data, such as responses of type A, CNAME and NS. We use these responses to append our list of
servers that need to be queried. If an answer isn't found before the resolver runs out of servers to try, it
will return an empty array, rather than an IP. If an answer is found, however, that answer is then simply
returned and printed.

The resolver is capable of caching its results. It saves these results in JSON format. Whenever the resolver
is ran with the -c argument (or --caching), the resolver will first look through the cache to find the answer.
If it's in the cache, it will simply return it. If not, it will run the regular algorithm, but it will save
all the hints found in the cache file. 

This is what was meant to happen with TTL, but it ended up not working the way we wanted it to:
Before checking for the answer in the cache, the resolver will update
the cache file. This is done to removed expired entries from the cache. To this end we've added a time_saved
variable to our ResourceRecords, which saves when a record is cached. If the time_saved variable plus the TTL
doesn't exceed the current time, the record is removed, since that means it's run out of time to live.
For this TTL functionality we've used the external library "time".

We've encountered a fair few encoding problems with UTF-8, which we've had to solve in rather unorthodox ways,
such as making sure ASCII isn't turned on and at one point even decoding and then encoding to UTF-8.